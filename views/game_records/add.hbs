<h3>Create Game Record</h3>
<div class="row">
    <form action="/game_records" method="post" class="col s12">

        <div class="input-field">
            <select class="deck-select" id="deck-1" name="deck-1">
            </select>
            <label for="deck-1">Deck Select Player 1</label>
        </div>
        <div class="input-field">
            <select class="deck-select" id="deck-2" name="deck-2">
            </select>
            <label for="deck-2">Deck Select Player 2</label>
        </div>
        <div class="input-field">
            <select class="deck-select" id="deck-3" name="deck-3">
            </select>
            <label for="deck-3">Deck Select Player 3</label>
        </div>
        <div class="input-field">
            <select class="deck-select" id="deck-4" name="deck-4">
            </select>
            <label for="deck-4">Deck Select Player 4</label>
        </div>
        <br>
        <div class="input-field">
            <select name="winner" id="winner" class="winner-select"></select>
            <label for="winner">Winner Select</label>
        </div>

        {{!-- <div class="row">
            <div class="input-field">
                <select class="deck-select" id="winner" name="winner">
                    <option value="" disabled selected>Choose a deck</option>
                {{#each decks}}
                    <option value="{{_id}}">{{commander}} || {{name}}</option>
                {{/each}}
                    <option value="">Draw</option>
                </select>
                <label for="winner">Select Winner</label>
            </div> 
        </div> --}}

         <button class="btn green">Create Game Record</button>
    </form>
</div>

<script id="deck-data" type="application/json">
    {{{json decks}}}
</script>

<script>
    
    document.addEventListener('DOMContentLoaded', function() {
        const deckData = JSON.parse(document.getElementById('deck-data').textContent);
        const dropdowns = document.querySelectorAll('.deck-select');
        const winnerDropdown = document.querySelector('#winner');

        // Initialize dropdowns
        dropdowns.forEach(dropdown => {
            // Start with default disabled option
            dropdown.innerHTML = '<option value="" disabled selected hidden>Choose a deck</option>';

            // Add decks
            deckData.forEach(deck => {
                const option = new Option(`${deck.name} || ${deck.commander}`, deck._id);
                dropdown.add(option);
            });

            // Add None option
            dropdown.add(new Option("None", ""));
        });

        // Initialize winner dropdown
        winnerDropdown.innerHTML = '<option value="" disabled selected hidden>Select the winning deck</option>';

        function updateDropdowns() {
            let selectedDecks = new Set();

            dropdowns.forEach(dropdown => {
                const selected = dropdown.value;
                if (selected && selected !== "") {
                    selectedDecks.add(selected);
                    console.log(`Adding ${selected} to selected`);
                }
            });

            // First clear disabled options in case selections have changed
            clearDisabled();

            // Disable selected options from each other dropdown
            //const disabledDropddowns = [];

            dropdowns.forEach(dropdown => {
                const currentSelected = dropdown.value;
                const options = dropdown.querySelectorAll('option');
                console.log(options);

                options.forEach(option => {
                    const value = option.value;
                    if (selectedDecks.has(value) && currentSelected !== value) {
                        option.classList.add('disabled');
                        console.log(option.classList);
                    }
                });
            });

            disableSelected();

            // Clear winner dropdown
            winnerDropdown.innerHTML = '<option value="" disabled selected hidden>Select the winning deck</option>';
            

            // Populate winner dropdown with selected decks
            deckData.forEach(deck => {
                if (selectedDecks.has(deck._id)) {
                    const option = new Option(`${deck.commander} || ${deck.name}`, deck._id);
                    winnerDropdown.add(option);
                }
            })

            M.FormSelect.init(dropdowns);
            M.FormSelect.init(winnerDropdown);

            /*dropdowns.forEach(dropdown => {
                const currentSelected = dropdown.value;

                // Clear existing options
                dropdown.innerHTML = '<option value="" disabled>Choose a deck</option>';

                // Add available options
                deckData.forEach(deck => {
                    if(!selectedDecks.has(deck._id) || deck._id === currentSelected) {

                        //console.log(`Deck available: ${deck.name} || ${deck.commander}`);
                        const option = new Option(`${deck.commander} || ${deck.name}`, deck._id);
                        dropdown.add(option);
                    }
                });

                // Add "None" option
                dropdown.add(new Option("None", ""));

                // Ensure the selected option remains selected
                dropdown.value = currentSelected;
                //console.log('Update complete');
            }); */
        }

        function toggleDisabled(options) {
            options.forEach(option => {
                option.classList.add('disabled');
            })
        }

        function clearDisabled() {
            const disabled = document.querySelectorAll('.disabled');
            disabled.forEach(option => {
                //option.removeAttribute('disabled');
                option.classList.remove('disabled');
                option.disabled = false;
            });
        }

        function disableSelected() {
            const disabled = document.querySelectorAll('.disabled');
            console.log(disabled);
            disabled.forEach(option => {
                //option.toggleAttribute('disabled');
                option.disabled = true;
            });
        }

        // Add event listeners to dropdowns
        dropdowns.forEach(dropdown => {
            dropdown.addEventListener('change', updateDropdowns);
        });

        // Initial population
        //updateDropdowns();

        // Initialize Materialize select
        M.FormSelect.init(dropdowns);
        M.FormSelect.init(winnerDropdown);
    })
</script>
